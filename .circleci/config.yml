version: 2.1

orbs:
  # The python orb contains a set of prepackaged CircleCI configuration you can use repeatedly in your configuration files
  # Orb commands and jobs help you with common scripting around a language/tool
  # so you don't have to copy and paste it everywhere.
  # See the orb documentation here: https://circleci.com/developer/orbs/orb/circleci/python
  python: circleci/python@1.4
  codecov: codecov/codecov@1.2.3

workflows:
  sample: # This is the name of the workflow, feel free to change it to better match your workflow.
    # Inside the workflow, you define the jobs you want to run.
    # For more details on extending your workflow, see the configuration docs: https://circleci.com/docs/2.0/configuration-reference/#workflows
    jobs:
      - build-and-test

jobs:
  build-and-test: # This is the name of the job, feel free to change it to better match what you're trying to do!
    # These next lines defines a Docker executors: https://circleci.com/docs/2.0/executor-types/
    # You can specify an image from Dockerhub or use one of the convenience images from CircleCI's Developer Hub
    # A list of available CircleCI Docker convenience images are available here: https://circleci.com/developer/images/image/cimg/python
    # The executor is the environment in which the steps below will be executed - below will use a python 3.9 container
    # Change the version below to your required version of python
    docker:
      - image: cimg/python:3.9.5
    resource_class: small
    # working_directory: /tmp
    steps:
      - checkout
      - python/install-packages:
          args: "--dev"
          pkg-manager: pipenv
      # - run:
      #     name: Create Artifacts
      #     command: |
      #       mkdir -p /tmp/artifacts;
      #       pipenv run pip list > /tmp/artifacts/pip.list;
      #       pipenv run cp Pipfile.lock /tmp/artifacts/Pipfile.lock;
      # - store_artifacts:
      #     path: /tmp/artifacts
      - run:
          name: Create test-results directory
          command: |
            mkdir -p test-results;
      - run:
          name: Run tests
          command: |
            pipenv run pytest --cov-config=.coveragerc --cov-report xml --cov-report html --cov;
      - store_test_results:
          path: /home/circleci/project/
      - store_artifacts:
          path: test-results
      - codecov/upload:
          file: test-results/coverage.xml
      # - run:
      #     name: Upload coverage to Codecov
      #     command: |
      #       bash <(curl -s https://codecov.io/bash) || echo "Codecov did not collect coverage reports"
